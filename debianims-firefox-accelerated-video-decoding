For Ubuntu for now:

Launcher example after Firefox install:

Applications -> Internet -> Firefox
Command:
/home/pi/scripts/x11-firefox

x11-firefox:

#!/bin/bash
MOZ_X11_EGL=1 /usr/lib/firefox/firefox

Make it executable

chmod +x /usr/lib/firefox/firefox

First check that vaapi has hardware video decoding support:

sudo -s
apt install -y ffmpeg mesa-va-drivers vainfo
exit
vainfo

If yes continue down here:


X11 OPTION Firefox 81 onwards:

https://www.linuxuprising.com/2019/12/how-to-install-latest-firefox-non-esr.html

https://forums.overclockers.co.uk/threads/firefox-now-supports-hardware-video-acceleration-youtube-etc.18900661/

0) Install Firefox Unstable which is newer than 81:

sudo nano /etc/apt/sources.list


At the end of this file (don't modify anything) add the following line:

deb http://deb.debian.org/debian/ unstable main contrib non-free


After adding this, save the file and exit the text editor (if you're using Nano press Ctrl + O followed Enter to save the file, and exit Nano using Ctrl + X).

2. Set a low pin priority for the Debian Unstable repository so your system doesn't automatically install packages from it unless you manually specify this.

Create and open a file /etc/apt/preferences.d/99pin-unstable as root with a text editor, for example using Nano command line text editor:

sudo nano /etc/apt/preferences.d/99pin-unstable


Paste the following in this file:

Package: *
Pin: release a=stable
Pin-Priority: 900

Package: *
Pin release a=unstable
Pin-Priority: 10


After adding this, save the file and exit the text editor (if you're using Nano press Ctrl + O, then press Enter to save the file, and exit using Ctrl + X).

3. Install the latest regular (non-ESR) Firefox on Debian 10 Buster (Stable) or Testing (Bullseye).

You can now install the latest normal Firefox on Debian 10 Buster (Stable) or Bullseye (Testing):

sudo apt update
sudo apt install -t unstable firefox



In case anyone didn't know, Firefox now finally supports (>v80) hardware video acceleration/decoding on the web,
including YouTube etc. This is VAAPI only for now, and works on both Wayland and X11 - though I've found the latter
far more useful. As it's X11 support, this works on basically all Linux distros as well as *BSD and it's been
flawless for me. I have finally been able to ditch janky ungoogled-chromium installs (patched for VAAPI)
and just use the built in Firefox packages with no messing. Win! Tested on Debian Buster and Bullseye,
Arch, Fedora 32 and 33, and FreeBSD.

Steps to activate:

1) Firefox needs launching with MOZ_X11_EGL=1 and you can do this either with the launcher, or set it
as an environmental variable in /etc/environment or .bashrc/.zshrc/whatever (export MOZ_X11_EGL=1).
2) Change the following preferences in about:config

    gfx.webrender.all:true
    media.ffmpeg.dmabuf-textures.enabled:true   <<<----- nu mai este, nu e nevoie
    media.ffmpeg.vaapi.enabled:true
    media.ffvpx.enabled:false

3) Install h264ify or enhanced-h264ify as the acceleration is x264-only at the moment. The former addon
works on all sites including embedded videos. The latter only works on YouTube but does allow disabling
of volume normalisation and allows you to choose which codecs to allow/disable. Swings and roundabouts.

You will need to have the appropriate hardware drivers for your platform (eg i965 for Intel iGPU,
amdgpu+mesa for AMD) as well as the libva and vaapi packages for your platform (libva, libva-intel-driver
or similar depending on your hardware). You can test that you're set with vainfo - the package is either
called vainfo or libva-utils depending on distro/platform. If vainfo gives a non-error output (i.e. a list
of codecs it can decode and encode) you're set.

You can test that it's working by launching Firefox with MOZ_LOG="PlatformDecoderModule:5" - for example
by running MOZ_LOG="PlatformDecoderModule:5" firefox in a terminal. While this does restrict you to x264
(and thus 1080p) on YouTube, it's great for low powered laptops etc running on battery (not so much on my
Threadripper desktop system, but meh). YMMV but it's pretty easy to get working and the Arch Wiki has some
distro-agnostic info if you get stuck.

Last edited: 28 Sep 2020

Just to say in this thread although the video acceleration requires > 80 you can still set gfx.webrender.all
to True in earlier versions and it greatly speeds up Firefox. Works perfectly in 78 ESR.



WAILAND OPTION:

1) Need to use Gnome in Wayland

https://linuxconfig.org/how-to-enable-disable-wayland-on-ubuntu-20-04-desktop

sudo -s
apt install -y gnome-session-wayland gdm3 gnome-core wayland-protocols htop synaptic mesa-va-drivers vainfo

=====================
Select GDM3 when asked during install.
=====================

WaylandEnable is set false by Ubuntu at compile time so need
nano /etc/gdm3/custom.conf

=====================
WaylandEnable=true
=====================

sync
poweroff
Power on the PC
After selecting the user and not putting password a small gear (*) will appear down right.
Press it.
Select Gnome on Wayland
Activities -> Terminal
As user:
echo $XDG_SESSION_TYPE
htop

2) If missing VP9 hardware deconding on the GPU need to install h264ify in Firefox:

https://addons.mozilla.org/ro/firefox/addon/h264ify/

3) Need to configure Firefox:

https://wiki.archlinux.org/index.php/Firefox#Hardware_video_acceleration
https://wiki.archlinux.org/index.php/Firefox/Tweaks#Enable_OpenGL_Off-Main-Thread_Compositing_(OMTC)

Since Firefox 75, H.264 hardware acceleration via VA-API is supported, other formats are supported since Firefox 76. [1]

Hardware acceleration only works when using Wayland; Xorg support is not implemented yet. [2]

Before trying VA-API support in Firefox be sure to:

Install correct VA-API driver for your video card and verify VA-API has been enabled and working correctly, see Hardware video acceleration;
Set widget.wayland-dmabuf-vaapi.enabled to true in about:config;
Enable appropriate hardware accelerated compositing for Firefox (GL compositor or WebRender): 

=====================
OpenGL works ok:
=====================

Basic software OMTC is enabled by default.

To check if OpenGL OMTC is enabled, go to about:support and under the "Graphics" section look for "Compositing". If it reports "Basic", OpenGL OMTC is disabled; if it reports "OpenGL" it is enabled.

If OpenGL OMTC is disabled, you can force-enable it by going to about:config and enabling layers.acceleration.force-enabled. Restart Firefox for changes to take effect. 
    
Set media.ffvpx.enabled to false in about:config to disable the bundled FFmpeg;
    
Test:
    
Open htop in Terminal
    
Open Firefox
    
Go to Youtube, play some videos, select 1080p HD quality
    
If after 20 seconds minute playback of each video CPU usage is below 40% for a dual core CPU
    
like a Pentium D or AMD Athlon X2 then video accelerated decoding works ok.

X11 having ffmpeg disabled in Firefox is under 70%

X11 having ffmpeg enabled in Firefox is under 90%

Step 5 will make Firefox avoid X11 in Ubuntu

4) If default Desktop environment is not Gnome on Wayland at startup use:

https://unix.stackexchange.com/questions/367294/how-do-i-change-my-default-session

sudo -s
update-alternatives --config x-session-manager

=====================
Number for Gnome on Wayland then Enter
=====================

poweroff
Power on the PC.

5) Make Firefox avoid X11 in Ubuntu

https://discourse.ubuntu.com/t/the-state-of-wayland-vs-x-esp-in-regard-to-to-the-next-lts/12576/10

The Firefox Wayland support feels super snappy now. If you want to try that out, I recommend the following commands to set the Wayland env variable globally for your user (only recommended for GNOME- and Ubuntu-session users):

mkdir -p ~/.config/environment.d
touch ~/.config/environment.d/60_firefox.conf
echo MOZ_ENABLE_WAYLAND=1 >>~/.config/environment.d/60_firefox.conf

LOG out and back in again to have an effect!!!

If you don’t set the the variable globally and just create a local .desktop file then links from e.g. Thunderbird or Polari won’t open because it tries to open an XWayland-Firefox instance in addtion to the Wayland one, which results in an error message.

If you want to disable the Wayland mode again, you have to delete the 60_firefox.conf file:

    rm ~/.config/environment.d/60_firefox.conf

The adventurous can opt-in to using the GPU driven Webrender engine in addition to the Wayland support which has to be done from within Firefox itself --> in about:config set gfx. webrender. all to True to enable it or to False to disable it.

https://wiki.archlinux.org/index.php/Firefox#Wayland

You may enter about:support in the URL bar to check the Window Protocol. It should say wayland instead of x11.

===================================================================================

https://www.phoronix.com/forums/forum/linux-graphics-x-org-drivers/wayland-display-server/1154976-firefox-is-seeing-work-on-wayland-va-api-video-acceleration

To test Firefox vaapi acceleration in Ubuntu 20.04:
1) sudo apt install -y ffmpeg mesa-va-drivers vainfo wayland-protocols
2) For GPU without support for VP9 install in Firefox:
https://addons.mozilla.org/ro/firefox/addon/h264ify/
3) Make Firefox try to start in wayland instead of X11 as user:
mkdir -p ~/.config/environment.d
touch ~/.config/environment.d/60_firefox.conf
echo MOZ_ENABLE_WAYLAND=1 >>~/.config/environment.d/60_firefox.conf
4) Configure in Firefox about:config :
widget.wayland-dmabuf-vaapi.enabled = true
layers.acceleration.force-enabled = true
media.ffvpx.enabled = false
5) Power off the PC.
6) At Ubuntu login screen choose down right Ubuntu on Wayland before entering the user password.
7) Verify Ubuntu is on Wayland: echo $XDG_SESSION_TYPE = wayland not x11
8) Verify Firefox is on Wayland: about:support CTRL+F Window Protocol = wayland not x11
9) Playing youtube video in 1080p HD the CPU usage for an AMD Athlon X2 = 20% on wayland, 90% on x11
