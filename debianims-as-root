#!/bin/bash

# Script to improve performance and endurance for Debian with SystemD (Debian 9+).
# Crafted to be repeatedly run without issues.

# --- Run as root.

if [[ ${EUID} -ne 0 ]]; then
  echo ""
  echo "Run this one as root, not as a user."
  echo ""
  exit 1
fi

# --- Asking for wait.

echo ""
echo "Working, please wait..."
echo ""

# --- Swap minimum usage, keep 64 MB kernel only RAM, buffer less data about files and save to storage after maximum 6 seconds.

# https://stackoverflow.com/questions/18353467/implementation-of-dirty-expire-centisecs
# https://support.hpe.com/hpsc/doc/public/display?docId=c02949914
# https://support.hpe.com/hpsc/doc/public/display?docId=emr_na-c02807570
# http://linux.sys-con.com/node/431838?page=0,2
# https://blog.kamens.us/2016/11/10/linux-what-to-do-when-the-oom-killer-is-being-triggered-when-you-have-plenty-of-memory
# https://www.ryadel.com/en/linux-memory-management-mechanism-analysis-kernel/
# http://www.petasan.org/forums/?view=thread&id=63
# https://developer.ridgerun.com/wiki/index.php/Linux_Performance_and_Tuning_Tricks
# https://wiki.ubuntu.com/ReducedPowerUsage

# Tested on old Pentium 4 with 768 MB for minimizing storage thrashing and maximizing responsiveness in low memory conditions.

# Without this configuration: Firefox with many tabs open hangs the computer, CTRL+ALT+F1 not possible, mouse cursor blocked.

# With this configuration: Firefox with many tabs open hangs the computer but CTRL+ALT+F1 is possible, mouse cursor still works.

# After CTRL+ALT+F1 login as root and run "killall firefox-esr" then ALT+F7 to return to the graphical Desktop.

# With "killall firefox" there is error no process found. Required command is "killall firefox-esr".

# If you buy/have more RAM it is still recommended to have this configuration - better kernel memory management so all is faster.

# vm.swappiness = 1 ---- THRASH LESS at the expense of MORE CPU USAGE (CPU is faster than thrashing)
# vm.min_free_kbytes = 65536 --- free memory is used for CACHE and BUFFERS at the expense of LESS RAM FOR APPLICATIONS
# vm.vfs_cache_pressure = 300 --- DELETES FROM RAM more data about file and directory inodes, at the expense of SLOWER STORAGE
# vm.dirty_background_ratio = 5 --- if dirty pagecache exceeds this percentage, writeback threads start writing back dirty RAM
# vm.dirty_ratio = 10 --- applications that want to write to the pagecache are blocked and start performing writeback as well
# vm.dirty_writeback_centisecs = 600 --- the interval at which the pdflush daemon wakes up to write dirty data to disk
# vm.dirty_expire_centisecs = 600 --- Defines after which timeframe a dirty page should be written out latest
# ^------------------------------ --- multiple pages dirtied in the same file will all be written when the expiration time occurs
# vm.min_slab_ratio = 1 --- amount of Slab space that can be recycled in the Slab pool when the percentage of the area is reached
# ^-------------------- --- for small and irregular memory allocation requirements, Linux designed Slab distributor

mkdir -p /etc/sysctl.d
cat <<EOF > /etc/sysctl.d/30-save-after-max-6-seconds.conf
vm.swappiness = 1
vm.min_free_kbytes = 65536
vm.vfs_cache_pressure = 300
vm.dirty_background_ratio = 5
vm.dirty_ratio = 10
vm.dirty_writeback_centisecs = 300
vm.dirty_expire_centisecs = 600
vm.min_slab_ratio = 1

EOF

# --- Make /tmp reside in tmpfs.

# Remove /tmp in tmpfs if already in
sed -i 's/tmpfs           \/tmp            tmpfs  nodev,nosuid,mode=1777     0 0//g' /etc/fstab
# and remove multiple newlines (VERY COMPLICATED !!!)
# https://stackoverflow.com/questions/922449/how-can-i-replace-multiple-empty-lines-with-a-single-empty-line-in-bash
sed -i 'N;/^\n$/D;P;D;' /etc/fstab
# Add /tmp in tmpfs in /etc/fstab
echo "" >> /etc/fstab
echo "tmpfs           /tmp            tmpfs  nodev,nosuid,mode=1777     0 0" >> /etc/fstab

# --- Enable zram swap and disable storage swap.

# Write /usr/bin/zramims and make executable
# https://github.com/novaspirit/rpi_zram
# Using cat requires escaping [[ ` ]] and [[ $ ]] with \
mkdir -p /usr/bin
cat <<EOF > /usr/bin/zramims
#!/bin/bash
cores=\$(nproc --all)
modprobe zram num_devices=\$cores
swapoff -a
totalmem=\`free | grep -e "^Mem:" | awk '{print \$2}'\`
mem=\$(( (\$totalmem / \$cores)* 1024 ))
core=0
while [ \$core -lt \$cores ]; do
  echo \$mem > /sys/block/zram\$core/disksize
  mkswap /dev/zram\$core
  swapon -p 5 /dev/zram\$core
  let core=core+1
done
EOF
chmod +x /usr/bin/zramims
# Write /etc/rc.local and make executable
cat <<EOF > /etc/rc.local
#!/bin/sh -e
/usr/bin/zramims &
exit 0
EOF
chmod +x /etc/rc.local
# Enable rc.local in SystemD
# https://www.itechlounge.net/2017/10/linux-how-to-add-rc-local-in-debian-9/
cat <<EOF > /etc/systemd/system/rc-local.service
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local

[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target
EOF
sync
sleep 1
systemctl enable rc-local

# --- Done.

sync
echo ""
echo "Reboot is required. Done."
echo ""
